{"version":3,"sources":["Components/Navbar.js","Components/TextForm.js","Components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","Mode","title","type","id","onClick","toggleMode","htmlFor","TextForm","useState","text","setText","findtext","setFindText","replacetext","setReplaceText","heading","value","rows","onChange","event","target","toUpperCase","showAlert","toLowerCase","navigator","clipboard","writeText","newtext","replace","str","wordArray","split","count","i","length","wordCount","Alert","alert","role","word","lower","charAt","slice","capitalize","message","defaultProps","App","setMode","setalert","setTimeout","document","body","style","backgroundColor","color","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.7cda9cf4.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\n\r\nexport default function Navbar(props) {\r\n  return (\r\n    <nav\r\n      className={`navbar navbar-expand-lg navbar-${props.Mode} bg-${props.Mode}`}\r\n    >\r\n      <div className=\"container-fluid\">\r\n        \r\n          {props.title}\r\n       \r\n        <button\r\n          className=\"navbar-toggler\"\r\n          type=\"button\"\r\n          data-bs-toggle=\"collapse\"\r\n          data-bs-target=\"#navbarSupportedContent\"\r\n          aria-controls=\"navbarSupportedContent\"\r\n          aria-expanded=\"false\"\r\n          aria-label=\"Toggle navigation\"\r\n        >\r\n          <span className=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n          <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n            \r\n            \r\n          </ul>\r\n          <div className=\"form-check form-switch\">\r\n            <input\r\n              className=\"form-check-input\"\r\n              type=\"checkbox\"\r\n              id=\"flexSwitchCheckDefault\"\r\n              onClick={props.toggleMode}\r\n            />\r\n            <label\r\n              className={`form-check-label text-${props.Mode==='light'?'dark':'light'} font-weight-bold`}\r\n              htmlFor=\"flexSwitchCheckDefault\"\r\n            >\r\n              Enable dark mode\r\n            </label>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </nav>\r\n  );\r\n}\r\n\r\nNavbar.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n};\r\n\r\nNavbar.defaultProps = {\r\n  title: \"Set title here\",\r\n};\r\n","import { useState } from \"react\";\r\n\r\nexport default function TextForm(props) {\r\n  const handleUpCase = () => {\r\n    setText(text.toUpperCase());\r\n    props.showAlert(\"success\",\"Converted to Upper Case\");\r\n  };\r\n\r\n  const handleLowerCase = () => {\r\n    setText(text.toLowerCase());\r\n    props.showAlert(\"success\",\"Converted to Lower Case\");\r\n  };\r\n  const handleOnChange = (event) => {\r\n    setText(event.target.value);\r\n  };\r\n\r\n  const handleClear = () => {\r\n    setText(\"\");\r\n    props.showAlert(\"success\",\"Text Cleared\");\r\n  };\r\n\r\n  const handleOnChangeF = (event) => {\r\n    setFindText(event.target.value);\r\n  };\r\n\r\n  const handleOnChangeR = (event) => {\r\n    setReplaceText(event.target.value);\r\n  };\r\n\r\n  const handleFandR = () => {\r\n    let newtext = text.replace(findtext, replacetext);\r\n    setText(newtext);\r\n    setFindText(\"\");\r\n    setReplaceText(\"\");\r\n  };\r\n\r\n  const handleCopy=()=>{\r\n    navigator.clipboard.writeText(text);\r\n    props.showAlert(\"success\",\"Copied to clipboard\");\r\n  }\r\n\r\n  const wordCount=(str)=>{\r\n    var wordArray= str.split(\" \");\r\n    let count=0;\r\n    for(let i=0;i<wordArray.length;i++){\r\n      if(wordArray[i]!==\"\"){\r\n        count=count+1;\r\n      }\r\n    }\r\n    return count;\r\n  }\r\n  \r\n  // const handleCapitalize=()=>{\r\n  //   let myArray=text.split(\".\");\r\n  //   for(let i=0;i<myArray.length;i++){\r\n  //     for(let j=0;j<myArray[i].charAt(i).length;j++){\r\n  //       if(myArray[i].charAt(j)!==\" \"){\r\n  //         myArray[i].charAt(j).replace(myArray[i].charAt(j),myArray[i].charAt(j).toUpperCase())\r\n  //         break;\r\n  //       }\r\n  //     }\r\n  //   }\r\n  //   setText(myArray.join(\".\"));\r\n  // }\r\n  const [text, setText] = useState(\"\");\r\n  const [findtext, setFindText] = useState(\"\");\r\n  const [replacetext, setReplaceText] = useState(\"\");\r\n  return (\r\n    <>\r\n      <div className=\"container \" >\r\n        <h1 className=\"p-2\" >{props.heading}</h1>\r\n        <div className=\"mb-3 my-3\">\r\n          <textarea\r\n            className=\"form-control\"\r\n            id=\"exampleFormControlTextarea1\"\r\n            value={text}\r\n            rows=\"8\"\r\n            onChange={handleOnChange}\r\n          ></textarea>\r\n          <button className=\"btn btn-primary my-3 mx-2\" onClick={handleUpCase}>\r\n            Convert to Upper Case\r\n          </button>\r\n          <button\r\n            className=\"btn btn-primary my-3 mx-2\"\r\n            onClick={handleLowerCase}\r\n          >\r\n            Convert to Lower Case\r\n          </button>\r\n          <button className=\"btn btn-primary my-3 mx-2\" onClick={handleClear}>\r\n            Clear\r\n          </button>\r\n\r\n          <button className=\"btn btn-primary my-3 mx-2\" onClick={handleCopy}>\r\n            Copy\r\n          </button>\r\n          {/* <button className=\"btn btn-primary my-3 mx-2\" onClick={handleCapitalize}>\r\n            Capitalize First Letter\r\n          </button> */}\r\n\r\n          \r\n        </div>\r\n      </div>\r\n      <div className=\"container my-1 \">\r\n        <label htmlFor=\"Find\" className=\"mx-1 d-block my-1 h4\">\r\n          Find\r\n        </label>\r\n        <input\r\n          type=\"text\"\r\n          className=\"p-1 mx-1 \"\r\n          value={findtext}\r\n          onChange={handleOnChangeF}\r\n        />\r\n\r\n        <label htmlFor=\"Replace\" className=\"mx-1 my-1 d-block h4\">\r\n          Replace\r\n        </label>\r\n        <input\r\n          type=\"text\"\r\n          className=\"p-1 mx-1\"\r\n          value={replacetext}\r\n          onChange={handleOnChangeR}\r\n        />\r\n        <button\r\n          className=\"btn btn-primary my-3 mx-2 d-block\"\r\n          onClick={handleFandR}\r\n        >\r\n          Find and Replace\r\n        </button>\r\n      </div>\r\n      <div className=\"container\">\r\n        <h2>Text Summary</h2>\r\n        {wordCount(text)} words and {text.length} characters\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nexport default function Alert(props) {\r\n  const capitalize=(word)=>{\r\n    const lower=word.toLowerCase();\r\n    return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n  }\r\n  return (\r\n   props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n      <strong>{capitalize(props.alert.type)}</strong> : {props.alert.message}\r\n    </div>\r\n  );\r\n}\r\n","\nimport Navbar from \"./Components/Navbar\";\nimport TextForm from \"./Components/TextForm\";\nimport { useState } from \"react\";\nimport Alert from \"./Components/Alert\";\n\n\nfunction App() {\n  const [Mode, setMode] = useState('light');\n  const [alert, setalert] = useState(null);\n\n  const toggleMode=()=>{\n      if(Mode==='light'){\n        setMode('dark');\n        document.body.style.backgroundColor=\"#38393a\";\n        document.body.style.color=\"white\";\n        showAlert(\"success\",\"Dark mode enabled\");\n      }\n      else{\n        setMode('light');\n        document.body.style.backgroundColor=\"white\";\n        document.body.style.color=\"black\";\n        showAlert(\"success\",\"Light mode enabled\");\n      }\n  }\n  const showAlert=(type, message)=>{\n      setalert({\n        type:type,\n        message:message\n      })\n      setTimeout(() => {\n        setalert(null);\n      }, 2000);\n  }\n  \n  return (\n    <>\n    \n    <Navbar  title=\"TEXT UTILIS\" Mode={Mode} toggleMode={toggleMode}/>\n    <Alert alert={alert}/>\n    <TextForm showAlert={showAlert} heading=\"Enter text below\" />\n        \n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}